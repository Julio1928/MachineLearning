#arboles de decision (ejemplos de creacion)
#Programa realizado el 08/11/2022
#Realizado por: Isaac Mizraym Hernandez Cabrera
########################################################GRAFICA DE DISPERSION###################################################
import pandas as pd
import matplotlib.pyplot as plt

pacientes = pd.read_csv("C:\\Users\\ProBook\Documents\Libro1.csv")

saludables = pacientes[pacientes["problema_cardiaco"]==0]
cardiacos = pacientes[pacientes["problema_cardiaco"]==1]

plt.figure(figsize=(6,6))
plt.xlabel("edad", fontsize = 20.0)
plt.ylabel('colesterol', fontsize = 20.0)

plt.scatter(saludables["edad"], saludables["colesterol"], label= "saludable (clase: 0 )", marker="*", c="skyblue", s = 200)
plt.scatter(cardiacos["edad"], cardiacos["colesterol"], label = "cardiaco (clase 1)", marker="*", c="lightcoral", s=200)
plt.legend(bbox_to_anchor=(1, 0.15))
plt.show


############################################################ENTROPIA##########################################################
######################################Promedio de información almacenada en una variable aleatoria############################
######################################mEDIDA DEL CAOS#########################################################################
from scipy.stats import entropy
from math import log

edades = pd.Series([40, 30, 20, 50])
colesterol = pd.Series([100, 110, 100, 110])

print(edades.value_counts()/edades.size)
print(colesterol.value_counts()/colesterol.size)
print(entropy(edades.value_counts()/edades.size, base=2))
print(entropy(colesterol.value_counts()/colesterol.size, base=2))

###################################################DATOS DE ENTRENAMIENTO Y PRUEBA############################################

from sklearn.model_selection import train_test_split

datos_entrena, datos_prueba, clase_entrena, clase_prueba = train_test_split(
    pacientes[["edad", "colesterol"]],
    pacientes["problema_cardiaco"], 
    test_size=0.30)

##################################################CREACION DE ARBOL###########################################################
from sklearn import tree

arbol_decision = tree.DecisionTreeClassifier(criterion="entropy", max_depth=2)

arbol = arbol_decision.fit(datos_entrena, clase_entrena)

accuracy = arbol_decision.score(datos_prueba, clase_prueba)

print(accuracy)

print(tree.export_text(arbol, feature_names=["Edad", "Colesterol"]))
plt.figure(figsize=(12, 6))
tree.plot_tree(arbol, feature_names=["Edad", "Colesterol"])
plt.show()

"""print("Nuevo paciente", arbol_decision.predict([[70, 150]]))"""